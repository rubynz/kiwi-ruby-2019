[{
  "name": "Eumir Gaspar",
  "bio": "I'm a senior Ruby developer from the Philippines. I have been an active part of the Ruby community there -  I have worked as the RubyConf PH website maintainer for a few years. I have since moved to Perth to work with <a href=\"http://rent.com.au\" target=\"_blank\">Rent.com.au</a> as the lead developer and the CTO and co-founder of Beanbag Entertainment. I also mentor people on the side via exercism.io and some boot camp websites as part of paying it forward back when I was mentored by one of my former bosses.",
  "title": "CRAYGO: Clean Ruby As You Go",
  "shortDesc": "This talk is all about improving and cleaning up your legacy code base and eventually pay off all (if not most) of your technical debts.",
  "description": "This talk is all about improving and cleaning up your legacy code base and eventually pay off all (if not most) of your technical debts. Still stuck with Rails 3 or 4? There are ways to move forward even with \"old\" code bases like yours! In this talk, we will talk about how to roll forward with new features using toggles, slowly replacing old modules, migrating / deleting unused tables, slowly moving to a Javascript frontend - all while maintaining your old monolith! How fun!\r\n\r\nSome of these are based on actual anecdotes and solutions that are currently live at the moment. Some are ongoing works and plans as we move forward and deliver new features each day. So strap on your wellies as we will be sludging through some muck and hopefully emerge with cleaner and prettier codebases. ",
  "twitter": "corrodedlotus",
  "picture": "./img/speakers/speaker-eumir.jpg",
  "tags": ["ruby", "rails", "refactoring", "maintaing code,"],
  "link" : "eumir",
  "live": true,
  "eumir": true
  }, {
  "name": "Julian Doherty",
  "bio": "Julian is a senior developer with 20 years experience, and has been hacking on Ruby for the last 12.<br><br>Originally from Wellington, New Zealand, he now calls Melbourne home. Currently working at Envato, he has spent time at some of the biggest Rails shops in Australia. Julian also runs the Elixir Melbourne meetup group, and tries to spend as much time as possible inflicting functional programming paradigms on codebases he works in.",
  "title": "Cool Functional Tricks In Ruby",
  "shortDesc": "We'll have a look at some of the lesser known functional programming approaches you can use in Ruby.",
  "description": "We'll have a look at some of the lesser known functional programming approaches you can use in Ruby. Although Ruby is mostly about OO programming, there are many FP concepts buried in there to leverage. Sometimes for better code, sometimes just because you can and it's fun. We'll dig into what the language gives you, what's in the stdlib, and what tortured constructs you can cook up with some good old fashioned Ruby metaprogramming.\r\n\r\nThings like: higher order functions; pattern matching; immutability; statelessness; and like any good FP talk, there will even be some talk of monads.",
  "twitter": "madlep",
  "picture": "./img/speakers/speaker-julian.jpg",
  "tags": ["ruby", "functional programming"],
  "link" : "julian",
  "live": true,
  "julian": true
  }, {
  "name": "Pete Nicholls",
  "bio": "",
  "title": "Ethics-Driven Development",
  "shortDesc": "In the months since the Christchurch mosque attacks, I've been trying to understand how hate groups spread online, and what role those of us who build technology can and should do. This talk is a summary of what I’ve learned and what actions we can take about it.",
  "description": "I was flying back to Christchurch when I heard news of the mosque shootings. To accept that an act of violence and hate on a scale unanticipated and unknown to New Zealand shores had taken place was surreal and heartbreaking.\r\n\r\nTechnology played an unprecedented role in the tragedy. The shooter was radicalized through message boards, emboldened by faceless online communities, and used social media to amplify their message of hate.\r\n\r\nIn the months since I have been trying to make sense of it all. I wanted to understand how hate groups spread online. I wanted to understand what role those of us who build technology can and should do. This talk is a summary of what I've learned and what actions we can take about it.",
  "twitter": "aupajo",
  "picture": "./img/speakers/speaker-pete.jpg",
  "tags": ["ethics"],
  "link" : "pete",
  "live": true,
  "pete": true
  }, {
  "name": "Shaun O'Connell & Sophie Price",
  "bio": "I'm a seasoned front-end developer, and built my first site in 1997, back when marquee was high-tech, and nested tables were all the rage.<br>Since then I've dabbled as a UX researcher and interaction designer, but my core love is for working with HTML, CSS, JavaScript and all the peripheral elements of the web. Open source stacks are a great environment to work within, and Ruby (Rails, Middleman) is no exception.<br><br>I moved to Wellington 5 years ago, after attending Webstock 2014, and now work at Flick Electric Co. Here I helped implement Flick's first Design System alongside some great people like Sophie Price, and Kah Chan.",
  "bioSophie": "I'm a product designer who's really passionate about UX, however I enjoy spending a fair bit of time getting my hands dirty with front-end code. I've been at Flick since October last year, after completing my Masters in Design Innovation at Victoria. At Flick I've continued my healthy obsession with design systems that began during an internship at Trade Me in 2016-17.<br><br> Outside of work you'll find me at the climbing wall, or outside bouldering when the wild Welly weather permits!",
  "title": "FEDUP at Flick",
  "shortDesc": "How flick is replacing the 'move fast and break things' mindset with one built on pattern libraries, high-quality code, and a passion for design systems.",
  "description": "### The setting\r\n\r\nWe're at an interesting point in Flick Electric's life, where the company is gradually shedding its young ways, and becoming a more mature company. We're replacing the 'move fast and break things' mindset with one focused on producing higher-quality code, code that is more readable, and reliable.\r\n\r\n### It's about the UI, and UX\r\n\r\nThe user interfaces within the Flick Experience are no different. This is where Sophie and Shaun come in.\r\nWhile our dev team struggles with a micro-services architecture we've inherited, we (the product design team) can make our Ruby developer's lives easier, by preparing tools and documentation for them, while also helping our product managers communicate the work involved by producing research-tested, high-fidelity, and consistent wireframes that are easy to translate into functional UIs.\r\n\r\n### Scaling up product development\r\n\r\nHow do two people scale up and help 15 or so of their colleagues with all the front-end work?\r\nWell, we think in patterns. We work with the mediums that we're effective with, in this case HTML and CSS. So, we built a pattern library, and it became our multiplier. It sucks in experience, cross-browser testing, prototyping, and some YAML. It then spits out documentation, HTML, and all the assets you need to succeed.\r\n\r\nYou've heard about pattern libraries before, but ours is a little different. We built it from scratch so that it can scratch our itches, and we love working with it.\r\n\r\n### Take aways\r\n\r\nAs with most systems, it's the people-driven aspects within those systems that are the most challenging. We'll share some of those challenges and how we solved them. We'll also share our passion for design systems: we think their efficacy goes beyond just hammering out designs and front-end code.\r\n\r\nThank you!\r\n-Shaun & Sophie",
  "twitter": "ndorfin",
  "picture": "./img/speakers/speaker-shaun-and-sophie.jpg",
  "tags": ["front-end development", "Middleman", "Static-site generators", "Design systems", "pattern libraries", "Asset Gems", "Distributed UI", "product design", "HTML", "CSS", "YAML", "JavaScript", "Documentation"],
  "link" : "shaun-and-sophie",
  "live": true,
  "shaun-and-sophie": true
  }, {
  "name": "Julianna Roen",
  "bio": "Julianna is a Ruby and JavaScript developer based out of New York. She works at Gusto — a payroll, benefits, and HR solution for small businesses in the US. She loves writing, making people laugh, trying to look cool on Instagram, and taking trips to New Zealand to spend time with her JAFA boyfriend.",
  "title": "Gusto & Xero: 4 Offices, 2 Countries, 1 Massive Payroll Integration. ",
  "shortDesc": "I'll share my journey of being part of this wild project and seeing it through from end to end.",
  "description": "On 30 July 2018, Gusto and Xero's business, engineering, product, and design teams met in San Francisco to kick off what was to become both companies' largest US-based partnership to date. For the next 6 months, the two SaaS orgs worked closely to build a software integration that would migrate Xero's thousands of US payroll customers to Gusto come 2019.\r\n\r\nAs an engineer on the frontlines of this project, I witnessed all of the trials and tribulations of making such a deep integration possible. With migration APIs, SSO, co-branding, user provisioning, webhooks, landing pages, customer lead CSVs, and more, this project contained a multitude of features that needed to be completed in a tight 6 month time span.\r\n\r\nIn my talk, I'll share my journey of being part of this wild project and seeing it through from end to end. I'll spill the tea on what went well, what went no-so-well, the pressure that comes with working with an outside company, and how the outcome of half a year's worth of collaboration panned out.",
  "twitter": "juliannaroen",
  "picture": "./img/speakers/speaker-julianna.jpg",
  "tags": ["xero", "gusto", "integration", "rails", "business", "partnership"],
  "link" : "julianna",
  "live": true,
  "julianna": true
  }, {
  "name": "Erin Belot",
  "bio": "Hello! I'm Erin, I'm Australian and a bit of a career changer. I used to work for The Royal Flying Doctors in Darwin but when I moved back home I found there wasn't much work needed so I got into tech. I love the problem solving and really nice code.<br><br> I probably like nice code too much and need to chill out a bit and crack on with work, but I haven't found that balance yet. I'd love to be able to give a talk on what I've learnt about fixing big ol' bugs :)",
  "title": "How to fix a bug in a monolith",
  "shortDesc": "Beekeeper Betty will take you on a journey to fix a sickly monolith. She's a bit of a nutter and will probably try to release some bugs into the audience. But she's the best there is at getting those big ol' bugs back into the wild where they belong.",
  "description": "Beekeeper Betty will take you on a journey to fix a sickly monolith. She's a bit of a nutter and will probably try to release some bugs into the audience. But she's the best there is at getting those big ol' bugs back into the wild where they belong. She's got a step by step process and some handy tools like Gitlens and Heatmap to aid her on her way. She's very thorough, she thinks about lots of different things. Like is this a case that doesn't need a coding solution? Or what risks might this new code introduce? Just be wary that she hasn't hidden some creepy crawlies or spiders under your seat! ",
  "twitter": "erinbelot",
  "picture": "./img/speakers/speaker-erin.jpg",
  "tags": ["Ruby", "Rails", "Bugs", "Gitlens", "Heatmap"],
  "link" : "erin",
  "live": true,
  "erin": true
  }, {
  "name": "Lena Plaksina",
  "bio": "Hi, I’m Lena. I’m an avid cat rescuer, learning enthusiast, and Rails Bridge Wellington organising committee member. I started out in design, but fell for web and software development during my first industry internship. I've been writing Ruby since 2015, and I'm currently learning other languages to expand my toolkit. I’m all about finding patterns, building and communicating software in a way that helps everyone understands it, and failing better – mistakes make me a better developer, and I believe that failing is just an opportunity to learn.<br><br>When I’m not coding, I’m watching movies with my 3-legged rescue cat Warlock, collecting enamel pins, and helping out and/or presenting at tech community events around town.",
  "title": "Just my type: things I learned from writing my own programming language",
  "shortDesc": "I think that programming languages are not merely (or even mainly) a technical facility, but rather a social one, and want to draw on my experience of laying the foundations of my own Open Source programming language to hopefully convince you of the same!",
  "description": "If programming languages are about technology, why did Matz optimise Ruby for “developer happiness”?\r\nComputers pay little regard to how an instruction is expressed — whatever we write in Ruby can just as well be expressed in Java, C#, or Smalltalk. So, why do people gravitate to one language over another? How do programming communities form? What drives their ethos and manifestos?\r\n\r\nI think that programming languages are not merely (or even mainly) a technical facility, but rather a social one, and want to draw on my experience of laying the foundations of my own Open Source programming language to hopefully convince you of the same!",
  "twitter": "plaksina_lena",
  "picture": "./img/speakers/speaker-lena.jpg",
  "tags": ["ruby", "computer science", "programming language theory", "culture"],
  "link" : "lena",
  "live": true,
  "lena": true
  }, {
  "name": "Rose Lu",
  "bio": "Rose Lu started her career as a mechatronics engineer working with embedded systems. She made the switch to Ruby in 2014 and has been happily tapping away at web applications and microservices ever since. Currently she is a Technical Lead at Flick Electric, working on building customer facing tools and hiring new developers. <br><br>Last year she gained her masters in creative writing and her debut essay collection 'All Who Live on Islands' is being published in November 2019. She loves to eat, especially Chinese food, and is always down for a good meal. Ask her about dumplings - the word “dumpling” in English refers to a style of food rather than a specific dish i.e. hargow, perogi, suimai, so be prepared to know your specific dumpling!!!!!!",
  "title": "Meet me behind the bike shed 🚲",
  "shortDesc": "Once you put something in the world, you cannot control how the message changes for different people, or throughout time. This talk is about communication in general, rather than just bikeshedding.",
  "description": "This talk is about communication in general, rather than just bikeshedding. I have a background in creative writing and counselling and this talk is more informed by practices I've learned in those fields rather than tech. \r\n\r\nWhen there are two people talking, and the different layers in which miscommunication can appear. To make a simplification, there are four stages: \r\nStage 1: What Person 1 is thinking \r\nStage 2: What Person 1 says/writes\r\nStage 3: What Person 2 hears/reads \r\nStage 4: What Person 2 understands \r\n\r\n### Stage 1: What Person 1 thinks\r\nThere is a strong relationship between language and thought. Most people have something like a stream of consciousness inside their heads, but when you stop and truly focus on this voice, you'll realise that this voice isn't always perfectly coherent. It's like shower thoughts - they seem amazing, but sometimes when you're towelling off and trying to grasp the specifics of your idea, it's not always there. A lot of people organise their minds in different ways, some people can be more visual or experiential, but if you need to communicate it to others, often it needs to be organised into words and sentences, which isn't an easy task for everyone. \r\n\r\n### Stage 2: What Person 1 says/writes \r\nWe are all different. People's speech/writing styles are extremely unique to them, as unique as fingerprints. Verbal/written communication actually gives a lot more information about the person rather than the direct facts that they are presenting. It's why things like r/relationships and AITA are so funny - you can read the lack of self awareness in their speech. Translating thoughts into clear speech is hard! Especially if English isn't your first language, or you like to communicate in other ways. \r\n\r\n### Stage 3: What Person 2 hears/reads \r\nThere are some practical things here. As Person 1, are you accommodating for any learning/physical disability that would prevent Person 2 from being able to understand you? Does Person 2 speak fluent English? \r\n\r\nAs Person 2: Are you open to listening? Do you secretly hate this person and have already written off what they are going to say? Are you thinking about something else? \r\n\r\n### Stage 4: What Person 2 understands \r\nPeople have different understandings and attachments to language. English is not a programming language! In programming, words like 'if' or 'else' have such narrow and predefined meanings, but English doesn't function in the same way! There's things like [this example](http://www.macmillandictionaryblog.com/rather-interesting) of how the word 'quite' means different things under American and British English.  What you need to look for is the intent behind what the speaker is trying to communicate, and they may use different words or phrasing than you would. But that doesn't mean that it's wrong. \r\n\r\n### What can you control? \r\n* Organising and being clear in your speech. Using words that can't be misunderstood (English has a lot of synonyms). Watching your tone and your emotions - how you say something has a huge effect on how it is received. \r\n* \"Correct\" grammar is a colonial construct please do not choose to be a pedant unless it impedes readability. \r\n* Improve your listening skills. It's hard to listen and formulate a reply at the same time. If you have to choose one, choose listening, and just have a conversation with more pauses. It's obvious to others when you're not actually listening. \r\n\r\n### What can't you control?\r\nYou cannot control how your words will be received. Facts are facts. You can do the best job you can of crafting your speech, and tailoring it to the audience, but at the end of the day you cannot guarantee that they will be received in the way that you intended them to. To dip a little in postmodern literary criticism - the author is dead. Once you put something in the world, you cannot control how the message changes for different people, or throughout time. \r\n\r\n### So how to stop bikeshedding? \r\nPart of it is the listening and writing skills I've described above. But a huge amount is to do with self awareness, and ego. Are you talking just because you're used to talking? Are you talking because you feel like you haven't been heard? Are you emotionally capable of stepping back from the situation, assessing it, and stopping it from continuing? ",
  "twitter": "plainricedinner",
  "picture": "./img/speakers/speaker-rose.jpg",
  "tags": ["ruby", "communication", "bike shedding"],
  "link" : "rose",
  "live": true,
  "rose": true
  }, {
  "name": "Michael Dowse",
  "bio": "I've been working with Ruby for about 10 years. I've worked across domains such as language learning, electricity pricing, and tax and each time I've been tasked with solving specific problems in a generalisable way.<br><br>Currently I'm CTO at Hnry - the financial sidekick for contractors and freelancers. I live in Wellington with my 4 year old daughter who is the subject of this talk.",
  "title": "What my toddler taught me about abstraction",
  "shortDesc": "Key lessons I've learned from observing my daughter Charlie as she spends her days trying to understand how the world works.",
  "description": "Abstractions are one of our key tools to make sense of incomprehensibly complex environments. They're mental models that we create by observation, that then allow us to take shortcuts when we encounter new situations.\r\n\r\nWe do this all the time in software development and yet somehow we often seem to get it wrong. Who hasn't found themselves battling a codebase that seems hell bent on not supporting the new feature that's required?\r\n\r\nI've spent the last few years observing my daughter Charlie as she spends her days trying to understand how the world works. It’s a hard job, there’s a lot of complexity to understand, and some of it is really hard to make sense of.\r\n\r\nEvery day she conceptualises abstractions and then chooses the correct one. Often she gets it wrong, and has to change her abstraction as she learns more about the world around her.\r\n\r\nHer challenges and mistakes are not so different to those we face in building software, and watching her has led me to reevaluate some of the choices I've been making. This talk will cover a few of the key lessons that I've learned.",
  "twitter": "MichaelDowse",
  "picture": "./img/speakers/speaker-michael.jpg",
  "tags": ["ruby", "object oriented programming"],
  "link" : "michael",
  "live": true,
  "michael": true
  }, {
  "name": "Nick Johnstone",
  "bio": "I love making stuff with computers, especially tools that help other people express themselves, understand or improve the world.<br><br>I'm always interested in learning more about what we can achieve with computers, and I love sharing that knowledge around.When I'm not doing that, I enjoy cycling, video games, playing the piano poorly and going for walks.",
  "title": "Your Browser on Ruby",
  "shortDesc": "This talk is about my quest to bring Ruby to the browser via WebAssembly. In it, I will introduce WebAssembly in a beginner-friendly way and explore the idea of alternative frontend languages, and walk through what's involved in making that a reality.",
  "description": "This talk is about my quest to bring Ruby to the browser via WebAssembly. In it, I will introduce WebAssembly in a beginner-friendly way and explore the idea of alternative frontend languages, and walk through what's involved in making that a reality.\r\n\r\nMy aim is that the audience will come away with a good understanding of what WebAssembly is, how it might impact the future landscape of our technologies, and ideally feel inspired to explore alternative languages such as Ruby for powering their frontends.",
  "twitter": "widdnz",
  "picture": "./img/speakers/speaker-nick.jpg",
  "tags": ["ruby", "javascript", "webassembly", "browser"],
  "link" : "nick",
  "live": true,
  "nick": true
  }]
